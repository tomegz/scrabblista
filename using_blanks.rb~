#def search
 #     letters = params[:q].gsub(/\s+/, "").chars.sort # needs validations
 #     keys = (2..letters.length).flat_map{ |n| letters.combination(n).map(&:join).map{|n| n = n.length.to_s + n.chars.sort.join } }.uniq
 #     @words = []
  #    keys.each { |key| @words.push($trie.children(key)) if $trie.has_children?(key) }
 #     @words.flatten!.map!{ |w| key_to_word(w) } unless @words.empty?
 #  end
require 'trie'

def key_to_word(key)
      a = key.length
      key[a/2+1..a-1]
end

def choose_letters(letters, key)
  letters = letters.select{ |l| l <= key.chars.last }
end

trie = Trie.read("word_trie") # uwaga => 5aaguwuwaga
puts "Trie is now loaded."
all_letters = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "r", "s", "t", "u", "w", "y", "z", "ó", "ą", "ć", "ę", "ł", "ń", "ś", "ź", "ż"]
input = "cg?"
letters = input.gsub(/\s+/, "").chars.sort
keys = (2..letters.length).flat_map{ |n| letters.combination(n).map(&:join).map{|n| n = n.length.to_s + n.chars.sort.join } }.uniq
puts "Keys generated"
keys_with_blanks = keys.select{ |k| k.include? "?" }.map{ |k| k.gsub("?","") }
final_keys = keys_with_blanks.map do |k| 
  current_letters = choose_letters(all_letters, k)
  k = current_letters.map{ |l| l.gsub(l,l+k) } 
end.flatten.map{ |k| k.chars.sort.join }.uniq
final_keys += keys_with_blanks
puts "Final keys ready"
print "Final: #{final_keys}\n"
words = []
final_keys.each { |key| words.push(trie.children(key)) if trie.has_children?(key) }
words.flatten!.map!{ |w| key_to_word(w) }.uniq! unless words.nil?
puts "Words found: #{words.size}"
#puts "Words: #{words}"



